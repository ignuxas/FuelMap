{"version":3,"sources":["components/FuelTypeCircles.jsx","components/Handlers.jsx","components/LocationPopup.jsx","components/SideCircles.jsx","components/StationsTable.jsx","App.js","reportWebVitals.js","index.js"],"names":["FuelTypeCircles","props","stationID","editableField","fuelData","averagePrices","avgPrices","Object","entries","map","fuelType","price","className","height","width","cx","cy","r","circleText","contentEditable","menuOpen","getFuelStations","a","order","document","getElementById","style","display","Axios","get","api","then","response","status","SetFuelStationDataFunc","data","SetErrorCodeFunc","catch","error","handleEdit","location","type","lID","ID","currentPrices","changedPricesDivs","querySelectorAll","loadingIcon","querySelector","editIcon","opacity","changedPrices","forEach","priceDiv","parseFloat","innerHTML","split","parentElement","classList","replace","changed","key","fetch","method","headers","body","JSON","stringify","sortByS","console","log","LocationPopup","name","address","id","position","onClick","updated","minPriceStations","sortBy","totalStations","index","setSortBy","toFixed","setPos","latitude","longitude","StationsTable","useState","setEditableField","FuelStationData","quantity","values","some","setDisplayedTableStations","fuelTypes","App","Map","SetFuelStationData","DisplayedTableStations","ErrorCode","setErrorCode","averagePrice","array","trueLength","value","i","length","useEffect","MapController","useMap","zoom","getZoom","flyTo","fType","prices","station","push","average","minNum","stationNum","getMinStation","x","href","target","rel","menu","left","toggleMenu","MapContainer","whenCreated","center","zoomControl","preferCanvas","TileLayer","attribution","url","subdomains","maxZoom","CircleMarker","radius","pathOptions","color","fillColor","fillOpacity","bubblingMouseEvents","weight","class","Popup","reverse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.44a04b5b.chunk.js","sourcesContent":["import { circleText } from \"../App\";\r\n\r\nexport default function FuelTypeCircles(props) {\r\n\r\n    const stationID = props.stationID;\r\n    const editableField = props.editableField;\r\n    const fuelData = props.fuelData;\r\n    const averagePrices = props.avgPrices;\r\n\r\n    return (\r\n        Object.entries(fuelData).map(([fuelType, price]) => (\r\n            price > 0 && price !== null ? (\r\n                <div className={`circle circle${fuelType}`}>\r\n                    <svg height=\"30\" width=\"30\">\r\n                        <circle cx=\"15\" cy=\"15\" r=\"15\" />\r\n                    </svg>\r\n                    <h4 className=\"iconText\">{circleText[fuelType]}</h4>\r\n                    <div contentEditable={editableField === stationID ? \"true\":\"false\"  /* todo: fix warnings */}\r\n                            className={`price ${averagePrices[fuelType] > price ? (\"priceGreen\") : (\"priceRed\")}`}>\r\n                            € {price}\r\n                        </div>\r\n                </div>\r\n            ) : (<></>)\r\n            )\r\n        )\r\n    )\r\n}","import { api } from \"../App\";\r\n\r\nimport { SetFuelStationDataFunc, SetErrorCodeFunc, sortByS } from \"../App\";\r\nimport Axios from \"axios\";\r\n\r\nvar menuOpen = false;\r\n\r\nexport async function getFuelStations(order=[\"A95\", \"ASC\"], showLoading=true) {\r\n    if(showLoading) \r\n    document.getElementById(\"Loading\").style.display = \"block\"; // could use refs instead\r\n\r\n    await Axios.get(`${api}/fuelstations?sortBy=${order[0]}&sortOrder=${order[1]}`).then((response) => {\r\n      if(response.status === 200){ SetFuelStationDataFunc(response.data) } \r\n      else { SetErrorCodeFunc(response.status) }\r\n    }).catch((error) => { SetErrorCodeFunc(500) });\r\n\r\n    document.getElementById(\"Loading\").style.display = \"none\"; // could use refs instead\r\n    return;\r\n};\r\n\r\nexport async function handleEdit(location, type=\"popup\"){\r\n    const lID = location.ID;\r\n    const currentPrices = location.fuelData;\r\n\r\n    var changedPricesDivs;\r\n\r\n    var loadingIcon;\r\n    var editIcon;\r\n    \r\n    if(type === \"popup\"){\r\n        changedPricesDivs = document.querySelectorAll(`#s${lID} .price`);\r\n        loadingIcon = document.querySelector(`#LoadEditP${lID}`);\r\n        editIcon = document.querySelector(`#EditIconP${lID}`);\r\n    } else {\r\n        changedPricesDivs = document.querySelectorAll(`#t${lID} .price`);\r\n        loadingIcon = document.querySelector(`#LoadEdit${lID}`);\r\n        editIcon = document.querySelector(`#EditIcon${lID}`); // todo: code below depends on a class, should be changed\r\n    }\r\n\r\n    loadingIcon.style.display = \"block\"; // show loading animation\r\n    editIcon.style.opacity = 0; // hide edit icon\r\n\r\n    var changedPrices = {};\r\n\r\n    changedPricesDivs.forEach((priceDiv) => { \r\n        // todo: code below depends on a class, should be changed\r\n        const price = parseFloat(priceDiv.innerHTML.split(\"&nbsp;\")[1]);\r\n        const fuelType = priceDiv.parentElement.classList[1].replace(\"circle\", \"\");\r\n\r\n        changedPrices[fuelType] = price;\r\n    });\r\n\r\n    // check if any prices were changed\r\n    var changed = false;\r\n    for (const [key, value] of Object.entries(changedPrices)) {\r\n        if(value !== currentPrices[key]){\r\n            changed = true;\r\n            break;\r\n        }\r\n    }\r\n\r\n    // if any prices were changed, send a post request to the server\r\n    if(changed){\r\n        await fetch(api+\"/editfuelstation\" , {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    ID: lID,\r\n                    ...changedPrices\r\n                })\r\n            })\r\n            .then(async (data) => {\r\n                if(data.status === 200){\r\n                    await getFuelStations(sortByS, false);\r\n                } else {\r\n                    // change prices back to original\r\n                    changedPricesDivs.forEach((priceDiv) => {\r\n                        priceDiv.innerHTML = \"€ \" + currentPrices[priceDiv.parentElement.classList[1].replace(\"circle\", \"\")]; // this may be very bad\r\n                    });\r\n                    console.log(\"Kainos nepakeistos\");\r\n                }\r\n            }\r\n        );\r\n    } else {\r\n        console.log(\"Kainos nepakeistos\");\r\n    }\r\n\r\n    loadingIcon.style.display = \"none\"; // hide loading animation\r\n    editIcon.style.opacity = 1; // show edit icon\r\n}\r\n\r\nexport function toggleMenu(){\r\n    var menu = document.querySelector(\"#Menu\");\r\n    if(menuOpen === false){ // OPEN menu\r\n      menu.style.left = \"0px\";\r\n      menuOpen = true;\r\n    } else {\r\n      menu.style.left = \"-320px\";\r\n      menuOpen = false;\r\n    }\r\n  }","import FuelTypeCircles from \"./FuelTypeCircles\";\r\n\r\nimport { handleEdit } from \"./Handlers\";\r\n\r\nexport default function LocationPopup(props) {\r\n    const location = props.location;\r\n    const averagePrices = props.avgPrices;\r\n\r\n    return (\r\n    <>\r\n        <div className=\"StationInfo\">\r\n            <h2 className=\"StationName\">{location.name}</h2>\r\n            <h4 className=\"address\">{location.address}</h4>\r\n        </div>\r\n\r\n        <div className=\"prices\" id={`s${location.ID}`}>\r\n            <FuelTypeCircles \r\n                fuelData={location.fuelData}\r\n                avgPrices={averagePrices}>\r\n            </FuelTypeCircles>\r\n        </div>\r\n\r\n        <div style={{position:\"relative\"}}>\r\n            <a className=\"ChangeLink\" id={`EditIconP${location.ID}`} onClick={() => handleEdit(location)}>\r\n                Keisti Kainą\r\n            </a>\r\n            <div className=\"lds-dual-ring small blue\" id={`LoadEditP${location.ID}`} />\r\n        </div>\r\n\r\n        <h4 className=\"updated\">{location.updated}</h4>\r\n    </>\r\n    )\r\n}","import {circleText} from \"../App\";\r\n\r\nexport default function FuelTypeCircles(props) {\r\n    const averagePrices = props.avgPrices;\r\n    const minPriceStations = props.minPriceStations;\r\n    const sortBy = props.sortBy;\r\n    const totalStations = props.totalStations;\r\n    \r\n    return (\r\n        <> {Object.entries(averagePrices).map(([fuelType, price], index) => (\r\n                <div className={`circleDisplay`} key={index}>\r\n                    <div className={`sideCircle BG${fuelType} ${sortBy[0] === fuelType ? (sortBy[1] === \"ASC\" ? \"green\":\"red\"):\"\"}`}  \r\n                        onClick={() => props.setSortBy([fuelType, (sortBy[0] === fuelType && sortBy[1] === \"ASC\" ? \"DESC\":\"ASC\")])}>\r\n                        <h4 className=\"iconTextDisplay\">{circleText[fuelType]}</h4>\r\n                    </div>\r\n                    <div className=\"fuelPricesDiv\">\r\n                        <h4 >VID: {price.toFixed(2)}€</h4>\r\n                        <h4 className=\"minPrice\" \r\n                            onClick={() => props.setPos([minPriceStations[fuelType].latitude, minPriceStations[fuelType].longitude])}> \r\n                            MIN: {minPriceStations[fuelType].fuelData[fuelType].toFixed(2)}€</h4>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            <div className=\"line\"></div>\r\n            {totalStations} <br />\r\n            <br></br>\r\n            Stations\r\n        </>\r\n    )\r\n}","import FuelTypeCircles from \"./FuelTypeCircles\";\r\nimport { useState } from \"react\";\r\nimport { handleEdit } from \"./Handlers\";\r\n\r\nexport default function StationsTable(props) {\r\n    const [editableField, setEditableField] = useState(-1);\r\n    const FuelStationData = props.FuelStationData;\r\n    const averagePrices = props.averagePrices;\r\n    var quantity = props.quantity;\r\n    const sortBy = props.sortBy;\r\n\r\n    function addQuantity() {\r\n        quantity += 1;\r\n        return <></>\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        {FuelStationData.map((location, index) => (\r\n            Object.values(location.fuelData).some((price) => (price > 0 && price != null)) && location.fuelData[sortBy[0]] !== 0 ? ( // check if any price is not null\r\n            \r\n            <div className={`stationRow ${editableField === location.ID ? \"editable\":\"\"}`} key={location.ID} \r\n                style={index > quantity ? {display:\"none\"}:{display:\"block\"}}\r\n            >\r\n                <div className=\"stationHeaders\" onClick={() => props.setPos([location.latitude, location.longitude])}>\r\n                    <div className=\"stationName\">{location.name}</div>\r\n                    <div className=\"stationAddress\">\r\n                        {location.address}\r\n                        <div className=\"stationUpdated\">{location.updated}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"stationPrices\" id={`t${location.ID}`}>\r\n                    <FuelTypeCircles\r\n                        fuelData={location.fuelData}\r\n                        avgPrices={averagePrices}\r\n                        stationID={location.ID}\r\n                        editableField={editableField}\r\n                    ></FuelTypeCircles>\r\n                </div>\r\n                <div className=\"stationEdit\" onClick={ // cancel editing if already editing\r\n                    editableField === location.ID ? \r\n                        () => {setEditableField(-1); handleEdit(location, \"table\")} : // if already editing\r\n                        () => setEditableField(location.ID)}\r\n                    >\r\n                    <div className=\"lds-dual-ring small\" id={`LoadEdit${location.ID}`}/>\r\n                    <i className=\"fa-solid fa-pen-to-square\" id={`EditIcon${location.ID}`}></i>\r\n                </div>\r\n            </div>\r\n        ) : (addQuantity())))}\r\n        <button onClick={\r\n            () => props.setDisplayedTableStations(quantity + 6)\r\n            }>LOAD MORE</button>\r\n        </>\r\n    )\r\n}","import \"./App.css\";\nimport \"./styles/StationsTables.css\";\nimport { useState } from \"react\";\nimport React, { useEffect } from \"react\";\nimport { MapContainer, TileLayer, Popup, CircleMarker, useMap} from \"react-leaflet\";\n\nimport LocationPopup from \"./components/LocationPopup\";\nimport SideCirles from \"./components/SideCircles\";\nimport StationsTable from \"./components/StationsTable\";\n\nimport { getFuelStations, toggleMenu } from \"./components/Handlers\";\n\nexport const circleText= {\n  \"A95\": \"95\",\n  \"A98\": \"98\",\n  \"D\": \"D\",\n  \"LPG\": \"LPG\"\n}\n\n// If I made this not hard coded, I would have to make a new request \n// to the server to get the fuel types which I could do, but I don't want to ¯\\_(ツ)_/¯\nexport const fuelTypes = [\"A95\", \"A98\", \"D\", \"LPG\"] // and this is faster anyway\n\nexport const api = \"https://fuelapi.ignuxas.com\"\n\nexport var SetFuelStationDataFunc, SetErrorCodeFunc, sortByS;\n\nfunction App() {\n  var Map;\n\n  const [FuelStationData, SetFuelStationData] = useState([]);\n  const [sortBy, setSortBy] = useState([\"A95\", \"ASC\"]);\n  const [DisplayedTableStations, setDisplayedTableStations] = useState(6);\n  const [ErrorCode, setErrorCode] = useState(200);\n\n  // ---- ON STARTUP ----\n  useEffect(() => {\n    // there is a better way to do this, will re-write sometime\n    SetErrorCodeFunc = setErrorCode;\n    SetFuelStationDataFunc = SetFuelStationData;\n    sortByS = sortBy;\n\n    getFuelStations(sortBy);\n  }, []);\n\n  // ---- ON SORT CHANGE ----\n  useEffect(() => { getFuelStations(sortBy) }, [sortBy]);\n\n  // ---- GET MIN PRICE STATION ----\n  function getMinStation(array, average) {\n    var minNum = 99;\n    var stationNum = 0;\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] !== null && array[i] > average - 0.3) { // filter out troll and null data\n        if (array[i] < minNum) {\n          minNum = array[i];\n          stationNum = i;\n        }\n      }\n    }\n\n    return FuelStationData[stationNum];\n  }\n\n  // ---- AVERAGE PRICES CALCULATOR ----\n  function averagePrice(array){\n    var trueLength = 0;\n    var value = 0\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] !== null && array[i] > 0.4 && array[i] < 3) { // filter out troll and null data\n        trueLength += 1\n        value += array[i]\n      }\n    }\n    return (value / trueLength)\n  }\n\n  // ---- MAP CONTROLLER ----\n  const MapController = () => {\n    const map = useMap();\n    Map = map;\n    return <></>;\n  };\n\n  // ---- SET POSITION ----\n  function setPos(position, zoom=Map.getZoom(), offset=[30000,0]) {\n    Map.flyTo(position, zoom);\n  }\n\n  // ---- AVERAGE PRICES / MIN PRICES ----\n  if (FuelStationData.length !== 0) {\n    // ---- AVERAGE PRICES ----\n    var averagePrices = {};\n\n    for (let fType = 0; fType < fuelTypes.length; fType++) { // for each fuel type\n      var prices = [];\n      for (let station = 0; station < FuelStationData.length; station++) { // for each station\n        prices.push(FuelStationData[station].fuelData[fuelTypes[fType]]);\n      }\n\n      averagePrices[fuelTypes[fType]] = averagePrice(prices);\n    }\n\n    // ---- MIN PRICE STATIONS ----\n    var minPriceStations = {};\n\n    for (let fType = 0; fType < fuelTypes.length; fType++) { // for each fuel type\n      minPriceStations[fuelTypes[fType]] = \n        getMinStation(FuelStationData.map(x => x.fuelData[fuelTypes[fType]]), averagePrices[fuelTypes[fType]]);\n    }\n  }\n\n  // ---- RENDER ----\n  return (\n    <div className=\"App\">\n      <div className=\"lds-dual-ring\" id=\"Loading\"/>\n      <div id=\"ErrorDiv\" style={ErrorCode !== 200 ? {display:\"block\"}:{display:\"none\"}}>\n        <h2>Error {ErrorCode}</h2>\n        The server is currently down, please try again later or contact me at <a className=\"aeffect\" href=\"mailto:mikolaitis.ignas@gmail.com\">mikolaitis.ignas@gmail.com</a>\n      </div>\n      {FuelStationData[0] ? (\n      <div id=\"Menu\">\n        <div id=\"StationPanel\">\n            <p id=\"Title\">KURAS</p>\n            <div id=\"StationTable\">\n              <StationsTable \n                FuelStationData={FuelStationData}\n                averagePrices={averagePrices}\n                quantity={DisplayedTableStations}\n                setDisplayedTableStations={setDisplayedTableStations}\n                setPos={setPos}\n                sortBy={sortBy}\n              ></StationsTable>\n            </div>\n            <footer>\n                <p>Fuel Map made by: <a className=\"aeffect\" href=\"https://ignuxas.com\" target=\"_blank\" rel=\"noreferrer\">Ignas Mikolaitis</a></p>\n                <p className=\"betaText\">OPEN BETA: This project is still in development and anything can change, there may be some bugs and unfinished features.</p>\n                <p className=\"redText\">Note: The prices are crowd sourced and may be inaccurate or outdated.</p>\n            </footer>\n        </div>\n        <div id=\"PricePanel\">\n            <i className=\"fas fa-bars\" onClick={() => toggleMenu()} />\n            <div className=\"avgFuelPrices\">\n                <SideCirles \n                    avgPrices={averagePrices} \n                    minPriceStations={minPriceStations}\n                    setPos={setPos} \n                    setSortBy={setSortBy}\n                    sortBy={sortBy}\n                    totalStations={FuelStationData.length}\n                ></SideCirles>\n            </div>\n        </div>\n    </div>\n    ) : (<></>)\n    }\n\n      <div id=\"map\">\n        <MapContainer\n          whenCreated={(map) => {\n              Map = map\n          }}\n          center={[55.14952486735533, 23.992860624307255]} // Kaunas\n          zoom={8}\n          zoomControl={false}\n          preferCanvas={true}\n        >\n          <MapController></MapController>\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n            url=\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\"\n            subdomains=\"abcd\"\n            maxZoom=\"20\"\n          />\n          {FuelStationData.map((location) => (\n            Object.values(location.fuelData).some((price) => (price > 0 && price != null)) ? ( // if any of the prices are not null\n              <CircleMarker\n                center={[location.latitude, location.longitude]}\n                radius={9}\n                pathOptions={{\n                  color: (location.fuelData[sortBy[0]] < averagePrices[sortBy[0]]) && location.fuelData[sortBy[0]] ? \"#00AC2B\" : \"#ac0000\",\n                  fillColor: (location.fuelData[sortBy[0]] < averagePrices[sortBy[0]]) && location.fuelData[sortBy[0]] ? \"#57FF71\" : \"#ff5757\",\n                  fillOpacity: location.fuelData[sortBy[0]] ? 1 : 0.15,\n                  opacity: location.fuelData[sortBy[0]] ? 1 : 0.15,\n                  bubblingMouseEvents: false,\n                  weight: 2.5,\n                }}\n                class=\"Marker\"\n              >\n                <Popup>\n                  <LocationPopup \n                    location={location} \n                    avgPrices={averagePrices}>\n                  </LocationPopup>\n                </Popup>\n              </CircleMarker>\n            ) : (<></>)\n            )).reverse() /* reverso so the under averge icons are on top when needed */}\n        </MapContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}